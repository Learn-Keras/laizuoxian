0:25 2019/12/7
pandas 数据分析、数据处理、数据可视化工具


------------------------------------------------------------------------
数据读取：

pandas需要读取表格类型的数据，然后进行分析

csv、tsv、txt   |  用逗号分隔、tab分割的纯文本文件      pd.read_csv
excel               |  微软xls、xlsx文件                              pd.read_excel
mysql              | 关系性数据库                                     pd.read_sql


import pandas as pd 
读取csv：
i='地址'
x=pd.read_csv(i) 

head()  查看前几行
shape  查看数据形状， 返回（行数，列数）
columns  查看列名列表
index  查看引索列
dtypes 查看每列数据类型

pd.read_csv(a,sep,header,names,skiprows) sep:分割符，header=None：表示没有标题行
names:可以自己设列名；skiprows=2:表示重第二行之后开始读取

df.to_excel("地址",index=False) #不希望吧  index  列 加入表格中
------------------------------------------------------------------------
数据结构：

DataFrame：二维数据，整个表格，多行多列：df.columns:列  df.index :行
Series：一维数据，一行一列

s1=pd.Series([])：可以直接传字典进去

s1.index 索引

s1.values 获取值


------------------------------------------------------------------------
数据查询：（读取数据，单个label查询、值列表查询、数值区间查询（包含开始结束）、
使用条件表达式查询、使用函数查询

df.loc（内容查询吧）

df.iloc

df.where

df.query

df.set_index() 设置索引对象


loc/iloc [:,:]->逗号 前面表示行，后面的是列。a : b表示a-b之间的范围取值
#############################################################################
eg:

In[1]: data
Out[1]: 
    A   B   C   D
a   0   1   2   3
b   4   5   6   7
c   8   9  10  11
d  12  13  14  15


#取索引为'a'的行
data.loc['a']

Out[2]:
A    0
B    1
C    2
D    3


#取第一行数据，索引为'a'的行就是第一行，所以结果相同
data.iloc[0]

Out[3]:
A    0
B    1
C    2
D    3


data.loc[:,['A']] #取'A'列所有行，多取几列格式为 data.loc[:,['A','B']]
Out[4]: 
    A
a   0
b   4
c   8
d  12
 
data.iloc[:,[0]] #取第0列所有行，多取几列格式为 data.iloc[:,[0,1]]
Out[5]: 
    A
a   0
b   4
c   8
d  12


data.loc[['a','b'],['A','B']] #提取index为'a','b',列名为'A','B'中的数据
Out[6]: 
   A  B
a  0  1
b  4  5
 
data.iloc[[0,1],[0,1]] #提取第0、1行，第0、1列中的数据
Out[7]: 
   A  B
a  0  1
b  4  5

data.loc[:,:] #取A,B,C,D列的所有行
Out[8]: 
    A   B   C   D
a   0   1   2   3
b   4   5   6   7
c   8   9  10  11
d  12  13  14  15

data.iloc[:,:] #取第0,1,2,3列的所有行
Out[9]: 
    A   B   C   D
a   0   1   2   3
b   4   5   6   7
c   8   9  10  11
d  12  13  14  15

data.loc[data['A']==0] #提取data数据(筛选条件: A列中数字为0所在的行数据)
Out[10]: 
   A  B  C  D
a  0  1  2  3

data.loc[(data['A']==0)&(data['B']==2)] #提取data数据(多个筛选条件)
Out[11]: 
   A  B  C  D
a  0  1  2  3

#############################################################################
新增列：

直接赋值：

'='
插入单个：
df.apply(a,axis): #axis=0:表示行，axis=1：表示列，a：传入的值

#value_counts(),计算值的个数

df.assign()
可以同时新增多个列，只可以操作插入列

按条件选择分组：


------------------------------------------------------------------------
统计函数：
汇总统计：
df.describe()
df.mean()
df.unique()  #查看一列里面有多少种值
df.value_counts(): #按值计数

相关系数：
df.corr()

协方差：
df.cov()


------------------------------------------------------------------------
缺失值处理：

检测是否有空值：
isnull()
notnull()

丢弃删除空值：
dropna(axis,how,inplace)
#how=any :任何值为空都删除，how=all：所有值为空才删除 ,inplace=true:修改当前对象，否则返回新的


填充空值：
fillna(value,method,axis,inplace)
 #value:填充的值，method=ffill/bfill : ffill使用前面值填充，bfill使用后面值
------------------------------------------------------------------------
数据排序：

Series.sort_values(ascending=True,inplace=False)
ascending：默认为true升序
DataFrame.sort_values(by,ascending=True,inplace=False)
by：字符串，单列或者多列排序

------------------------------------------------------------------------
字符串处理:
步骤：
获取Series的str属性，然后再属性上调用函数；

DataFrame没有str属性；

















































