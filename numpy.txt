0:25 2019/12/7
https://www.runoob.com/numpy/numpy-tutorial.html （numpy总结地址）
import numpy as np


NumPy Ndarray 对象：
numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)
object	数组或嵌套的数列
dtype	数组元素的数据类型，可选
copy	对象是否需要复制，可选
order	创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）
subok	默认返回一个与基类类型一致的数组
ndmin	指定生成数组的最小维度
--------------------------------------------------------------------------------------------
NumPy 数据类型(转化方法):
numpy.dtype(object, align, copy)
object - 要转换为的数据类型对象
align - 如果为 true，填充字段使其类似 C 的结构体。
copy - 复制 dtype 对象 ，如果为 false，则是对内置数据类型对象的引用
--------------------------------------------------------------------------------------------
NumPy 数组属性:
ndarray.ndim	秩，即轴的数量或维度的数量
ndarray.shape	数组的维度，对于矩阵，n 行 m 列
ndarray.size	数组元素的总个数，相当于 .shape 中 n*m 的值
ndarray.dtype	ndarray 对象的元素类型
ndarray.itemsize	ndarray 对象中每个元素的大小，以字节为单位
ndarray.flags	ndarray 对象的内存信息
ndarray.real	ndarray元素的实部
ndarray.imag	ndarray 元素的虚部
ndarray.data	包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。
--------------------------------------------------------------------------------------------
NumPy 创建新数组:
numpy.empty(shape, dtype = float, order = 'C')    #数组元素为随机值，因为它们未初始化
numpy.zeros(shape, dtype = float, order = 'C')    #创建指定大小的数组，数组元素以 0 来填充
numpy.ones(shape, dtype = None, order = 'C')    #创建指定形状的数组，数组元素以 1 来填充
shape	数组形状
dtype	数据类型，可选
order	有"C"和"F"两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。
--------------------------------------------------------------------------------------------
NumPy 从已有的数组创建数组：
numpy.asarray(a, dtype = None, order = None)          #类似 numpy.array，但 numpy.asarray 参数只有三个
a	任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组

numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)
numpy.frombuffer 用于实现动态数组。
numpy.frombuffer 接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。
buffer	可以是任意对象，会以流的形式读入。
dtype	返回数组的数据类型，可选
count	读取的数据数量，默认为-1，读取所有数据。
offset	读取的起始位置，默认为0。

numpy.fromiter(iterable, dtype, count=-1) #numpy.fromiter 方法从可迭代对象中建立 ndarray 对象，返回一维数组。
iterable	可迭代对象
--------------------------------------------------------------------------------------------
NumPy 从数值范围创建数组:
numpy.arange(start, stop, step, dtype)   #numpy 包中的使用 arange 函数创建数值范围并返回 ndarray 对象

np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)  
#numpy.linspace 函数用于创建一个一维数组，数组是一个等差数列构成的

np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)
#numpy.logspace 函数用于创建一个于等比数列
start	起始值，默认为0
stop	终止值（不包含）
step	步长，默认为1
dtype	返回ndarray的数据类型，如果没有提供，则会使用输入数据的类型。

num	要生成的等步长的样本数量，默认为50
endpoint	该值为 true 时，数列中中包含stop值，反之不包含，默认是True。
retstep	如果为 True 时，生成的数组中会显示间距，反之不显示
base	对数 log 的底数
-------------------------------------------------------------------------------------------
https://www.cnblogs.com/zuoshoushizi/p/8727773.html
随机抽样 (numpy.random)
rand(d0, d1, ..., dn)
randint(low[, high, size])
random_integers(low[, high, size])

排序：
shuffle(x)    现场修改序列，改变自身内容。（类似洗牌，打乱顺序）
permutation(x)          返回一个随机排列

--------------------------------------------------------------------------------------------
NumPy 切片和索引:
ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。
ndarray 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数
进行，从原数组中切割出一个新数组。


import numpy as np
a = np.arange(10)
s = slice(2,7,2)   # 从索引 2 开始到索引 7 停止，间隔为2
print (a[s])          -> [2  4  6]
#可以通过冒号分隔切片参数 start:stop:step
b = a[2:7:2]   # 从索引 2 开始到索引 7 停止，间隔为 2
print(b)    

冒号 : 的解释：如果只放置一个参数，如 [2]，将返回与该索引相对应的单个元素。
如果为 [2:]，表示从该索引开始以后的所有项都将被提取。
如果使用了两个参数，如 [2:7]，那么则提取两个索引(不包括停止索引)之间的项。

切片还可以包括省略号 …，来使选择元组的长度与数组的维度相同。 
如果在行位置使用省略号，它将返回包含行中元素的 ndarray。           
--------------------------------------------------------------------------------------------
NumPy 高级索引:
1、整数数组索引:(获取数组中(0,0)，(1,1)和(2,0)位置处的元素)

x = np.array([[1,  2],  [3,  4],  [5,  6]])              1,2
y = x[[0,1,2],  [0,1,0]]                                     3,4
print (y)      ->[1  4  5]                                   5,6

2、布尔索引:(布尔索引通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组)
实例获取大于 5 的元素：
x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  
print ('我们的数组是：')
print (x)
print ('\n')  
print  ('大于 5 的元素是：') # 现在我们会打印出大于 5 的元素
print (x[x >  5])            ->[ 6  7  8  9 10 11]

3、花式索引:（花式索引指的是利用整数数组进行索引）
花式索引根据索引数组的值作为目标数组的某个轴的下标来取值。对于使用一维整型数组作为索引，
如果目标是一维数组，那么索引的结果就是对应位置的元素；如果目标是二维数组，那么就是对应下标的行。
花式索引跟切片不一样，它总是将数据复制到新数组中。
x=np.arange(32).reshape((8,4))
print (x[[4,2,1,7]]) #就是第4行，第2行，第1行，第7行
->
[[16 17 18 19]
 [ 8  9 10 11]
 [ 4  5  6  7]
 [28 29 30 31]]

--------------------------------------------------------------------------------------------
NumPy 广播(Broadcast)：
广播(Broadcast)是 numpy 对不同形状(shape)的数组进行数值计算的方式， 对数组的算术运算通常在相应的元素上进行。
如果两个数组 a 和 b 形状相同，即满足 a.shape == b.shape，那么 a*b 的结果就是 a 与 b 数组对应位相乘。
这要求维数相同，且各维度的长度相同。

--------------------------------------------------------------------------------------------
NumPy 迭代数组:(NumPy 迭代器对象 numpy.nditer 提供了一种灵活访问一个或者多个数组元素的方式)

Fortran order，即是列序优先；C order，即是行序优先；
c_index	可以跟踪 C 顺序的索引
f_index	可以跟踪 Fortran 顺序的索引
multi-index	每次迭代可以跟踪一种索引类型
external_loop	给出的值是具有多个值的一维数组，而不是零维数组

--------------------------------------------------------------------------------------------
Numpy 数组操作:
1、修改数组形状:
reshape	不改变数据的条件下修改形状
flat	数组元素迭代器
flatten	返回一份数组拷贝，对拷贝所做的修改不会影响原始数组
ravel	返回展开数组

numpy.reshape(arr, newshape, order='C')
arr：要修改形状的数组
newshape：整数或者整数数组，新的形状应当兼容原有形状
order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'k' -- 元素在内存中的出现顺序。

numpy.ndarray.flatten(order='C')  order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'K' -- 元素在内存中的出现顺序。

2、翻转数组:
transpose	对换数组的维度
ndarray.T	和 self.transpose() 相同  #转置
rollaxis	向后滚动指定的轴
swapaxes	对换数组的两个轴

numpy.transpose(arr, axes)  arr：要操作的数组 axes：整数列表，对应维度，通常所有维度都会对换。
numpy.rollaxis(arr, axis, start)  start：默认为零，表示完整的滚动。会滚动到特定位置。
numpy.swapaxes(arr, axis1, axis2)  axis1：对应第一个轴的整数  axis2：对应第二个轴的整数
 
3、修改数组维度
numpy.expand_dims(arr, axis)#numpy.expand_dims 函数通过在指定位置插入新的轴来扩展数组形状
numpy.squeeze(arr, axis)#numpy.squeeze 函数从给定数组的形状中删除一维的条目

4、连接数组
oncatenate	连接沿现有轴的数组序列
stack	沿着新的轴加入一系列数组。
hstack	水平堆叠序列中的数组（列方向）
vstack	竖直堆叠序列中的数组（行方向）

numpy.concatenate((a1, a2, ...), axis) #numpy.concatenate 函数用于沿指定轴连接相同形状的两个或多个数组
a1, a2, ...：相同类型的数组  axis：沿着它连接数组的轴，默认为 0

numpy.stack(arrays, axis) #arrays相同形状的数组序列  axis：返回数组中的轴，输入数组沿着它来堆叠

5、分割数组
split	将一个数组分割为多个子数组
hsplit	将一个数组水平分割为多个子数组（按列）
vsplit	将一个数组垂直分割为多个子数组（按行）

numpy.split(ary, indices_or_sections, axis)   #numpy.split 函数沿特定的轴将数组分割为子数组
ary：被分割的数组
indices_or_sections：果是一个整数，就用该数平均切分，如果是一个数组，为沿轴切分的位置（左开右闭）
axis：沿着哪个维度进行切向，默认为0，横向切分。为1时，纵向切分

6、数组元素的添加与删除
resize	返回指定形状的新数组
append	将值添加到数组末尾
insert	沿指定轴将值插入到指定下标之前
delete	删掉某个轴的子数组，并返回删除后的新数组
unique	查找数组内的唯一元素 ,numpy.unique 函数用于去除数组中的重复元素

numpy.resize(arr, shape)  arr：要修改大小的数组  shape：返回数组的新形状

numpy.append(arr, values, axis=None)arr：输入数组
values：要向arr添加的值，需要和arr形状相同（除了要添加的轴）
axis：默认为 None。当axis无定义时，是横向加成，返回总是为一维数组！当axis有定义的时候，分别为0和1的时候。
当axis有定义的时候，分别为0和1的时候（列数要相同）。当axis为1时，数组是加在右边（行数要相同）。

numpy.insert(arr, obj, values, axis) obj：在其之前插入值的索引 values：要插入的值

Numpy.delete(arr, obj, axis) obj:可以被切片，整数或者整数数组，表明要从输入数组删除的子数组

numpy.unique(arr, return_index, return_inverse, return_counts)
 
--------------------------------------------------------------------------------------------
NumPy 字符串函数:(函数在字符数组类（numpy.char）中定义)   numpy.char.  +  函数名

add()	对两个数组的逐个字符串元素进行连接
multiply()	返回按元素多重连接后的字符串
center()	居中字符串
capitalize()	将字符串第一个字母转换为大写
title()	将字符串的每个单词的第一个字母转换为大写
lower()	数组元素转换为小写
upper()	数组元素转换为大写
split()	指定分隔符对字符串进行分割，并返回数组列表
splitlines()	返回元素中的行列表，以换行符分割
strip()	移除元素开头或者结尾处的特定字符
join()	通过指定分隔符来连接数组中的元素
replace()	使用新字符串替换字符串中的所有子字符串
decode()	数组元素依次调用str.decode
encode()	数组元素依次调用str.encode
--------------------------------------------------------------------------------------------
NumPy 数学函数
三角函数
NumPy 提供了标准的三角函数：sin()、cos()、tan()、arcsin，arccos，和 arctan 是 sin，cos 和 tan 的反三角函数。
numpy.degrees() 函数将弧度转换为角度

舍入函数
numpy.around() 函数返回指定数字的四舍五入值。
numpy.around(a,decimals) decimals: 舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置
numpy.floor() 返回小于或者等于指定表达式的最大整数，即向下取整
numpy.ceil() 返回大于或者等于指定表达式的最小整数，即向上取整。
--------------------------------------------------------------------------------------------
NumPy 算术函数
NumPy 算术函数包含简单的加减乘除: add()，subtract()，multiply() 和 divide()
numpy.reciprocal() 函数返回参数逐元素的倒数。如 1/4 倒数为 4/1。
numpy.power() 函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂
numpy.mod() 计算输入数组中相应元素的相除后的余数，numpy.remainder() 也产生相同的结果
--------------------------------------------------------------------------------------------
NumPy 统计函数（都可以提供axis)
numpy.amin() 用于计算数组中的元素沿指定轴的最小值。
numpy.amax() 用于计算数组中的元素沿指定轴的最大值。
numpy.ptp()函数计算数组中元素最大值与最小值的差（最大值 - 最小值）
numpy.median() 函数用于计算数组 a 中元素的中位数（中值）
numpy.mean() 函数返回数组中元素的算术平均值
numpy.average() 函数根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值
std = sqrt(mean((x - x.mean())**2))标准差
mean((x - x.mean())** 2)方差
--------------------------------------------------------------------------------------------
NumPy 排序、条件刷选函数:
           种类	             速度           最坏情况	          工作空间     稳定性
'quicksort'（快速排序）	1	O(n^2)	                 0             否
'mergesort'（归并排序）	2	O(n*log(n))	~n/2	是
'heapsort'（堆排序）  	3	O(n*log(n))	  0	否

numpy.sort(a, axis, kind, order)  #numpy.sort() 函数返回输入数组的排序副本
numpy.argsort() 函数返回的是数组值从小到大的索引值。

a: 要排序的数组
axis: 沿着它排序数组的轴，如果没有数组会被展开，沿着最后的轴排序， axis=0 按列排序，axis=1 按行排序
kind: 默认为'quicksort'（快速排序）
order: 如果数组包含字段，则是要排序的字段

numpy.argmax() 和 numpy.argmin()函数分别沿给定轴返回最大和最小元素的索引
numpy.nonzero() 函数返回输入数组中非零元素的索引
numpy.where() 函数返回输入数组中满足给定条件的元素的索引
numpy.extract() 函数根据某个条件从数组中抽取元素，返回满条件的元素
--------------------------------------------------------------------------------------------
NumPy 线性代数:
dot	两个数组的点积，即元素对应相乘。
vdot	两个向量的点积
inner	两个数组的内积
matmul	两个数组的矩阵积
determinant	
solve	求解线性矩阵方程
inv	计算矩阵的乘法逆矩阵

numpy.dot(a, b, out=None)  out : ndarray, 可选，用来保存dot()的计算结果

数组的行列式 
numpy.linalg.det() 函数计算输入矩阵的行列式
numpy.linalg.solve() 函数给出了矩阵形式的线性方程的解
numpy.linalg.inv() 函数计算矩阵的乘法逆矩阵
--------------------------------------------------------------------------------------------
NumPy Matplotlib:
可以通过向 plot() 函数添加格式字符串来显示离散值。 可以使用以下格式化字符

--------------------------------------------------------------------------------------------


























